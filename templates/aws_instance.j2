{% set ec2=item %}
{% set charcode = {'a': 0,'b': 1,'c': 2,'d': 3,'e': 4,'f': 5,'g': 6,'h': 7} %}

{#vpc_security_group_ids = [ "${data.terraform_remote_state.{{vpc}}.{{default_sg|default('sg-core-default')}}}"{% if nic0.sg is defined %},"${aws_security_group.sg-{{base}}-{{nic0.sg}}.id}"{% endif %} ]
##subnet_id = "${element(split(",",data.terraform_remote_state.{{vpc}}.{{nic0.subnet}}),index(list("a","b","c","d","e"),"{{ec2.az|default(az)}}"))}"#}

{% for t in templates %}
data "template_file" "{{t.name}}-{{ec2.name}}" {
  template = <<EOF
{% include './templates/'~t.source %}
EOF
  vars {
    vpc = "${local.vpc}"
{% for nic in ec2.nic|default(common.nic) %}
    dev{{loop.index}} = "{{nic.device|default('eth'~loop.index0)}}"
    cidr{{loop.index}} = "${data.aws_subnet.{{nic.subnet}}.{{charcode[ec2.az|default('a')]}}.cidr_block}"
{% endfor %}
  }
}
{% endfor %}


{% for nic in ec2.nic|default(common.nic) %}
{% set outer_loop = loop %}

resource "aws_network_interface" "{{ec2.name}}-nic{{loop.index0}}" {
    description = "{{ec2.name}}-{{nic.name|default(nic.device|default('nic'~loop.index0))}} network interface"
    subnet_id = "${element(split(",",local.{{nic.subnet}}),index(list("a","b","c","d","e"),"{{ec2.az}}"))}"
{% if nic.private_ip is defined %}
{% set ipcomma = joiner(',') %}
{% set ipcount = [0] %}
    private_ips = [{% for ip in (nic.private_ip if (nic.private_ip is not string) else [nic.private_ip]) %} {% if ip is string %} {{ipcomma()}}{% if ip %}"{{ip}}"{% endif %} {% else %} {{ipcomma()}}{% if ip.priv is defined and ip.priv %}"{{ip.priv}}"{% endif %} {% endif %} {% set undefined = ipcount.append(ipcount.pop() +1) %} {% endfor %}]
    private_ips_count = {{ipcount.pop()}}
{% endif %}
{% if nic.sg is defined %}
{% set sgcomma = joiner(',') %}
    security_groups = [ {% for sg in (nic.sg if (nic.sg is not string) else [nic.sg]) %} {{sgcomma()}}{%if 'terraform' in sg or sg.startswith('sg-')%}"{{sg}}"{%else%}"${aws_security_group.sg-{{base}}-{{sg}}.id}"{%endif%} {% endfor %} ]
{% endif %}
    tags {
        Name = "{{ec2.name}}-{{nic.name|default(nic.device|default('nic'~loop.index0))}}"
        Environment = "{{env}}"
        Project = "{{project}}"
        Application = "{{app}}"
    }
{% if nic.skip_source_check|default(False) %}
    source_dest_check = false
{% endif %}
}

{% if nic.private_ip is defined %}
{% for ip in (nic.private_ip if (nic.private_ip is not string) else [nic.private_ip]) %}
{% if ip is not string and ip.pub is defined %}
{% set eip_name = ip.pub | default(outer_loop.index0 ~ '_' ~ loop.index) %}
resource "aws_eip" "{{ec2.name}}_{{eip_name}}" {
  vpc = true
}
{% set ignored = exported.extend([{'name': ec2.name+'_'+eip_name, 'value': '${aws_eip.'+ec2.name+'_'+eip_name+'.public_ip}'}]) %}
{% if ip.priv is defined and ip.priv %}
resource "aws_eip_association" "eip_assoc_{{ec2.name}}_{{eip_name}}" {
#  instance_id = "${aws_instance.{{ec2.name}}.id}"
  allocation_id = "${aws_eip.{{ec2.name}}_{{eip_name}}.id}"
{% if outer_loop.index0 == 0 %}
  network_interface_id         = "${aws_instance.{{ec2.name}}.network_interface_id}"
{% else %}
  network_interface_id         = "${aws_network_interface.{{ec2.name}}-nic{{outer_loop.index0}}.id}"
{% endif %}
  private_ip_address = "{{ip.priv}}"
}
{% endif %}
{% endif %}

{% endfor %} {# IP #}
{% endif %}

{% endfor %} {# NIC #}



##
## AWS Instance
##
resource "aws_instance" "{{ec2.name}}" {
    ami = "{{ec2.ami|default(common.ami)}}"
    instance_type = "{{ec2.instance_type|default(common.instance_type)}}"
    key_name = "{{ec2.key_name|default(common.key_name)}}"
    iam_instance_profile   = "${aws_iam_instance_profile.ip-{{base}}.name}"
    disable_api_termination = true

    network_interface {
      network_interface_id = "${aws_network_interface.{{ec2.name}}-nic0.id}"
      device_index = 0
    }
    depends_on = ["aws_network_interface.{{ec2.name}}-nic0"]

{% set devices = ['f','g','h','i','j','k','l','m','n'] %}
{% for dsk in (ec2.disk|default(common.disk)) %}
{% if loop.index >1 %}
    ebs_block_device {
        device_name = "/dev/{{dsk.device|default('sd'+devices[loop.index0-1])}}"
        volume_type = "{{dsk.type}}"
        volume_size = "{{dsk.size}}"
        delete_on_termination = {{'true' if dsk.delete_on_termination|default(true) else 'false' }}
    }
{% else %}
    root_block_device {
        volume_type = "{{dsk.type}}"
        volume_size = "{{dsk.size}}"
        delete_on_termination = {{'true' if dsk.delete_on_termination|default(true) else 'false' }}
    }
{% endif %}
{% endfor %}
{% set _metadata = ec2.userdata|default(common.userdata)|default(none)%}
{% if _metadata %}
{% set _datafile = (datafiles|selectattr("name", "match", '^'~ _metadata ~'$')|first|default(false)) %}
{% if _datafile %}
{% if _datafile.singleton|default(false) %}
    user_data = "${data.template_file.{{_metadata}}.rendered}"
{% endif %} {# singleton #}
{% if not _datafile.singleton|default(false) %}
    user_data = "${data.template_file.{{_metadata}}-{{ec2.name}}.rendered}"
{% endif %} {# not singleton #}
{% else %} {# datafile #}
    ## user_data {{_metadata}} not found
{% endif %} {# not datafile #}
{% endif %}
    tags {
        Name = "{{ec2.name|default(base + '-${count.index + 1}')}}"
        Environment = "{{env}}"
        Project = "{{project}}"
        Application = "{{app}}"
{% if ec2.tags is defined %}
{% for k, v in ec2.tags.iteritems() %}
        {{k}} = "{{v}}"
{% endfor %}
{% endif %}
{% if common.tags is defined %}
{% for k, v in common.tags.iteritems() %}
        {{k}} = "{{v}}"
{% endfor %}
{% endif %}
    }
    lifecycle {
      ignore_changes = ["user_data"]
    }
}

{% set dskoffset = (ec2.disk|default(common.disk)|default([])|length)-1 %}
{% for dsk in (ec2.addondisk|default(common.addondisk)|default([])) %}
resource "aws_ebs_volume" "{{ec2.name}}_dsk{{dskoffset+loop.index0}}" {
    availability_zone = "{{region}}{{ec2.az}}"
    size = {{dsk.size}}
    type = "{{dsk.type|default(omit)}}"
    tags {
        Name = "{{ec2.name}}_dsk{{dskoffset+loop.index0}}"
        Environment = "{{env}}"
        Project = "{{project}}"
        Application = "{{app}}"
    }
}
resource "aws_volume_attachment" "ebs_att_{{ec2.name}}_dsk{{dskoffset+loop.index0}}" {
  device_name = "/dev/{{dsk.device|default('sd'+devices[dskoffset+loop.index0])}}"
  volume_id   = "${aws_ebs_volume.{{ec2.name}}_dsk{{dskoffset+loop.index0}}.id}"
  instance_id = "${aws_instance.{{ec2.name}}.id}"
  depends_on = [ "aws_instance.{{ec2.name}}", "aws_ebs_volume.{{ec2.name}}_dsk{{dskoffset+loop.index0}}" ]
}

{% endfor %}


{% if (ec2.exported is defined and ec2.exported) or (common.exported is defined and common.exported) %}
output "{{ec2.name}}" {
  value = "${aws_instance.{{ec2.name}}.id}"
}
output "{{ec2.name}}_ip" {
  value = "${aws_instance.{{ec2.name}}.private_ip}"
}
{% endif %}
{% if (ec2.dns is defined or common.dns is defined) %}
resource "null_resource" "dns-{{ec2.name}}" {
    triggers {
        instance_ids = "${aws_instance.{{ec2.name}}.id}"
    }
    depends_on = [ "aws_instance.{{ec2.name}}" ]

    provisioner "remote-exec" {
        connection {
            host = "{{ynap_network.jumphost}}"
            type = "ssh"
            user = "{{ynap_network.jumphost_user}}"
            agent = "true"
        }
        inline = [
            "sudo /opt/ynap/bin/setup-dns-for-server.sh -t update -n {{ec2.name}} -r ${aws_instance.{{ec2.name}}.private_ip} -F",
            "sudo /opt/ynap/bin/setup-dns-for-server.sh -t update -n {{ec2.name}} -r ${aws_instance.{{ec2.name}}.private_ip} -F"
        ]
    }
}
{% endif %}

{% for nic in ec2.nic|default(common.nic) %}
{% if loop.index0 > 0 %}
resource aws_network_interface_attachment "{{ec2.name}}-nic{{loop.index0}}" {
    depends_on = ["aws_instance.{{ec2.name}}","aws_network_interface.{{ec2.name}}-nic{{loop.index0}}"]
    network_interface_id = "${aws_network_interface.{{ec2.name}}-nic{{loop.index0}}.id}"
    instance_id = "${aws_instance.{{ec2.name}}.id}"
    device_index = {{loop.index0}}
}
{% endif %}
{% endfor %} {# NIC #}
