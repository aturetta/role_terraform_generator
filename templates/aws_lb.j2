{% for elb in (load_balancers|default([])) %}
{% if elb.type is defined and elb.type != 'classic' %}
{% if elb.name is defined %}
{% set lbname = 'lb-'+('' if elb.nobase is not defined or elb.nobase else base+'-')+elb.name %}
{% else %}
{% set lbname = 'lb-'+base %}
{% endif %}
resource "aws_lb" "{{lbname}}" {
    name = "{{lbname}}"
{% if elb.internal is defined and elb.internal %}
    internal = true
{% else %}
    internal = false
{% endif %}
    load_balancer_type = "{{elb.type}}"
{% if elb.type == 'application' %}
{% if elb.sg is defined %}
{% set elbsgcomma = joiner(',') %}
    security_groups = [ {% for sg in (elb.sg if (elb.sg is not string) else [elb.sg]) %} {{elbsgcomma()}}{%if 'terraform' in sg%}"{{sg}}"{%else%}"${aws_security_group.sg-{{base}}-{{sg}}.id}"{%endif%} {% endfor %} ]
{% endif %}
    idle_timeout = 3600
    {% endif %}

{% set elbsncomma = joiner(',') %}
    subnets = [ {% for zone in elb.zones %}
{{elbsncomma()}}"${element(split(",",local.{{elb.subnet}}),index(list("a","b","c","d","e"),"{{zone}}"))}"
{% endfor %} ]

    enable_cross_zone_load_balancing = true
    tags = {
        Name = "{{lbname}}"
        Environment = "{{env}}"
        Project = "{{project}}"
        Application = "{{app}}"
        {% for k, v in (elb.tags|default({}) | combine(common.tags|default({})) ).items() %}
        "{{k}}" = "{{v}}"
        {% endfor %}
    }

{% if vms is defined or elb.sg is defined %}
    depends_on = [
{% set elbdepcomma = joiner(',') %}
{% for ec2 in (vms|default([])) %}
{{elbdepcomma()}}aws_instance.{{ec2.name}}
{% endfor %}
{% if elb.sg is defined %}
{% for sg in (elb.sg if (elb.sg is not string) else [elb.sg]) %}
{% if 'terraform' not in sg  %}{{elbdepcomma()}}aws_security_group.sg-{{base}}-{{sg}}{%endif%}
{% endfor %}
{% endif %}
]
{% endif %}

}





{% for lstn in elb.listeners %}
resource "aws_lb_target_group" "{{lbname~'-'~lstn.port}}" {
    name     = "{{lbname~'-'~lstn.port}}"
    port     = {{lstn.port}}
    protocol = "{{lstn.proto|default('TCP')}}"
    vpc_id   = local.vpc
    {#    health_check {
            healthy_threshold = 2
            unhealthy_threshold = 2
            timeout = 5
            target = "{{elb.health_check|default('TCP:80')}}"
            interval = 30
        }
    #}
}

{% for ec2 in vms|default([]) %}
resource "aws_lb_target_group_attachment" "{{lbname~'-'~ec2.name~'-'~lstn.port}}" {
  target_group_arn = aws_lb_target_group.{{lbname~'-'~lstn.port}}.arn
  target_id        = aws_instance.{{ec2.name}}.id
  port             = {{lstn.port}}
}
{% endfor %}

resource "aws_lb_listener" "{{lbname~'_'~lstn.port}}" {
  load_balancer_arn = aws_lb.{{lbname}}.arn
  port              = "{{lstn.port}}"
  protocol          = "{{lstn.proto|default('TCP')}}"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.{{lbname~'-'~lstn.port}}.arn
  }
}
{% endfor %}


{% if (elb.exported is defined and elb.exported) %}
output "{{lbname}}" {
  value = aws_lb.{{lbname}}.dns_name
}
{% endif %}

{% endif %}{# !classic #}

{% endfor %}
